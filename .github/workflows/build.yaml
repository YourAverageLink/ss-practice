on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: Windows Build
            os: windows-latest
            artifact: windows
            artifact_suffix: ""
            executable_suffix: ".exe"
          - name: MacOS Build x64
            os: macos-13
            artifact: macos
            artifact_suffix: _intel
            executable_suffix: ""
          - name: MacOS Build arm64
            os: macos-14
            artifact: macos
            artifact_suffix: _apple_silicon
            executable_suffix: ""
          - name: Linux Build
            os: ubuntu-latest
            artifact: linux
            artifact_suffix: ""
            executable_suffix: ""
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-desktop-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-desktop-
            ${{ runner.os }}-
      
      - name: Install Dioxus CLI
        run: cargo install dioxus-cli
      
      - name: Check formatting
        run: cargo fmt --check
      
      # No tests are currently included
      # - name: Run tests
      #   run: cargo test
      
      - name: Build/Bundle for desktop
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            # bundling is required to include the app icon
            dx bundle --release --package-types macos
          else
            dx build --release
          fi
        shell: bash
      
      - name: Create distribution directory
        run: mkdir -p dist
        shell: bash
      
      - name: Copy desktop artifacts
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            find target -name "*.app" -type d -exec cp -r {} dist/ \;
          else
            find target -name "test${{ matrix.executable_suffix }}" -type f -executable -exec cp {} dist/ \;
          fi
        shell: bash
      
      - name: Copy README
        run: cp README.md dist/
        shell: bash
      
      - uses: SebRollen/toml-action@v1.2.0
        id: read_toml
        with:
          file: "Cargo.toml"
          field: "package.version"
      
      - uses: actions/upload-artifact@v4
        with:
          name: SSGZ ${{ steps.read_toml.outputs.value }} (${{ matrix.artifact }}${{ matrix.artifact_suffix }})
          path: dist